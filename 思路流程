# -mof
还原二阶魔方
什么是二阶魔方
   二阶魔方是最简单的魔方，由8个小块组成，且每个小块都有3个带有颜色的面，但是需要注意的是，魔方的每个小块涂色状态都各不相同。
   二阶魔方的上帝之数=11，即在任意状态下的魔方最多只需要11次操作就可以还原。
   那么我们规定对魔方的操作一共只有三种，即分别绕x、y、z轴旋转。且只选定距离我们最近的一组进行变换。
建模
   使用numpy中的3维数组来表示8个小魔方在空间中的位置，
   对于每一个小魔方块，我们依次按照xyz的顺序表示其3个面上的颜色。那么我们可以设定一个魔方，他到最靠近我们的那块魔方的坐标为[0][1][1]，其颜色为[ ‘g’ ‘r’ ‘w’ ]
  所以在旋转魔方的时候，不仅小魔方的位置在变，魔方的颜色也在变，举例说明变化规律：假设[0][1][0]处的魔方块经过一次绕x轴旋转的操作到了[0][1][1]，则这一个移动的小魔方块的颜色也会从[ ‘g’ ‘o’ 'w ’ ]变成[ ‘g’ ‘w’ ‘o’]，即，沿着x轴转，那么除了x轴的其他两个方向上的两个颜色位置会发生交换。
   综上，我们可以建立一个三维数组，对于每一个数据单元，我们又可以在其中放列表(长度为3)存储其颜色。所以我们实际上创建的是一个大小为2*2*2*3的四维数组来表示二阶魔方的状态，对于这样一个魔方，使用前序遍历算法，按照深度优先算法在三叉树内对魔方的状态进行不断的变换和匹配检测，就可以实现对魔方的复原和向特定状态的转化。
